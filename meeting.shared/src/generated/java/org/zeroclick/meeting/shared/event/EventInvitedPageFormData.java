package org.zeroclick.meeting.shared.event;

import java.util.Date;

import javax.annotation.Generated;

import org.eclipse.scout.rt.shared.data.basic.table.AbstractTableRowData;
import org.eclipse.scout.rt.shared.data.form.AbstractFormData;
import org.eclipse.scout.rt.shared.data.form.fields.AbstractValueFieldData;
import org.eclipse.scout.rt.shared.data.form.fields.tablefield.AbstractTableFieldBeanData;

/**
 * <b>NOTE:</b><br>
 * This class is auto generated by the Scout SDK. No manual modifications
 * recommended.
 */
@Generated(value = "org.zeroclick.meeting.client.event.EventInvitedPageForm", comments = "This class is auto generated by the Scout SDK. No manual modifications recommended.")
public class EventInvitedPageFormData extends AbstractFormData {

	private static final long serialVersionUID = 1L;

	public AskedEventTable getAskedEventTable() {
		return getFieldByClass(AskedEventTable.class);
	}

	public Description getDescription() {
		return getFieldByClass(Description.class);
	}

	public MaximalStartDate getMaximalStartDate() {
		return getFieldByClass(MaximalStartDate.class);
	}

	public MinimalStartDate getMinimalStartDate() {
		return getFieldByClass(MinimalStartDate.class);
	}

	public Participants getParticipants() {
		return getFieldByClass(Participants.class);
	}

	public static class AskedEventTable extends AbstractTableFieldBeanData {

		private static final long serialVersionUID = 1L;

		@Override
		public AskedEventTableRowData addRow() {
			return (AskedEventTableRowData) super.addRow();
		}

		@Override
		public AskedEventTableRowData addRow(int rowState) {
			return (AskedEventTableRowData) super.addRow(rowState);
		}

		@Override
		public AskedEventTableRowData createRow() {
			return new AskedEventTableRowData();
		}

		@Override
		public Class<? extends AbstractTableRowData> getRowType() {
			return AskedEventTableRowData.class;
		}

		@Override
		public AskedEventTableRowData[] getRows() {
			return (AskedEventTableRowData[]) super.getRows();
		}

		@Override
		public AskedEventTableRowData rowAt(int index) {
			return (AskedEventTableRowData) super.rowAt(index);
		}

		public void setRows(AskedEventTableRowData[] rows) {
			super.setRows(rows);
		}

		public static class AskedEventTableRowData extends AbstractTableRowData {

			private static final long serialVersionUID = 1L;
			public static final String eventId = "eventId";
			public static final String createdDate = "createdDate";
			public static final String subject = "subject";
			public static final String slot = "slot";
			public static final String duration = "duration";
			public static final String venue = "venue";
			public static final String startDate = "startDate";
			public static final String endDate = "endDate";
			public static final String minimalStartDate = "minimalStartDate";
			public static final String maximalStartDate = "maximalStartDate";
			public static final String state = "state";
			private Long m_eventId;
			private Date m_createdDate;
			private String m_subject;
			private Long m_slot;
			private Long m_duration;
			private String m_venue;
			private Date m_startDate;
			private Date m_endDate;
			private Date m_minimalStartDate;
			private Date m_maximalStartDate;
			private String m_state;

			public Long getEventId() {
				return m_eventId;
			}

			public void setEventId(Long newEventId) {
				m_eventId = newEventId;
			}

			public Date getCreatedDate() {
				return m_createdDate;
			}

			public void setCreatedDate(Date newCreatedDate) {
				m_createdDate = newCreatedDate;
			}

			public String getSubject() {
				return m_subject;
			}

			public void setSubject(String newSubject) {
				m_subject = newSubject;
			}

			public Long getSlot() {
				return m_slot;
			}

			public void setSlot(Long newSlot) {
				m_slot = newSlot;
			}

			public Long getDuration() {
				return m_duration;
			}

			public void setDuration(Long newDuration) {
				m_duration = newDuration;
			}

			public String getVenue() {
				return m_venue;
			}

			public void setVenue(String newVenue) {
				m_venue = newVenue;
			}

			public Date getStartDate() {
				return m_startDate;
			}

			public void setStartDate(Date newStartDate) {
				m_startDate = newStartDate;
			}

			public Date getEndDate() {
				return m_endDate;
			}

			public void setEndDate(Date newEndDate) {
				m_endDate = newEndDate;
			}

			public Date getMinimalStartDate() {
				return m_minimalStartDate;
			}

			public void setMinimalStartDate(Date newMinimalStartDate) {
				m_minimalStartDate = newMinimalStartDate;
			}

			public Date getMaximalStartDate() {
				return m_maximalStartDate;
			}

			public void setMaximalStartDate(Date newMaximalStartDate) {
				m_maximalStartDate = newMaximalStartDate;
			}

			public String getState() {
				return m_state;
			}

			public void setState(String newState) {
				m_state = newState;
			}
		}
	}

	public static class Description extends AbstractValueFieldData<String> {

		private static final long serialVersionUID = 1L;
	}

	public static class MaximalStartDate extends AbstractValueFieldData<Date> {

		private static final long serialVersionUID = 1L;
	}

	public static class MinimalStartDate extends AbstractValueFieldData<Date> {

		private static final long serialVersionUID = 1L;
	}

	public static class Participants extends AbstractTableFieldBeanData {

		private static final long serialVersionUID = 1L;

		@Override
		public ParticipantsRowData addRow() {
			return (ParticipantsRowData) super.addRow();
		}

		@Override
		public ParticipantsRowData addRow(int rowState) {
			return (ParticipantsRowData) super.addRow(rowState);
		}

		@Override
		public ParticipantsRowData createRow() {
			return new ParticipantsRowData();
		}

		@Override
		public Class<? extends AbstractTableRowData> getRowType() {
			return ParticipantsRowData.class;
		}

		@Override
		public ParticipantsRowData[] getRows() {
			return (ParticipantsRowData[]) super.getRows();
		}

		@Override
		public ParticipantsRowData rowAt(int index) {
			return (ParticipantsRowData) super.rowAt(index);
		}

		public void setRows(ParticipantsRowData[] rows) {
			super.setRows(rows);
		}

		public static class ParticipantsRowData extends AbstractTableRowData {

			private static final long serialVersionUID = 1L;
			public static final String userId = "userId";
			public static final String role = "role";
			public static final String state = "state";
			public static final String invitedBy = "invitedBy";
			public static final String reason = "reason";
			public static final String externalEventId = "externalEventId";
			private Long m_userId;
			private String m_role;
			private String m_state;
			private Long m_invitedBy;
			private String m_reason;
			private String m_externalEventId;

			public Long getUserId() {
				return m_userId;
			}

			public void setUserId(Long newUserId) {
				m_userId = newUserId;
			}

			public String getRole() {
				return m_role;
			}

			public void setRole(String newRole) {
				m_role = newRole;
			}

			public String getState() {
				return m_state;
			}

			public void setState(String newState) {
				m_state = newState;
			}

			public Long getInvitedBy() {
				return m_invitedBy;
			}

			public void setInvitedBy(Long newInvitedBy) {
				m_invitedBy = newInvitedBy;
			}

			public String getReason() {
				return m_reason;
			}

			public void setReason(String newReason) {
				m_reason = newReason;
			}

			public String getExternalEventId() {
				return m_externalEventId;
			}

			public void setExternalEventId(String newExternalEventId) {
				m_externalEventId = newExternalEventId;
			}
		}
	}
}
